# Now, we're going to practice creating a script, named ticky_check.py,' \
#  that generates two different reports from this internal ticketing system log file i.e.,
# syslog.log. This script will create the following reports:
#
# The ranking of errors generated by the system: A list of all the error messages logged and
# how many times each error was found, sorted by the most common error to the least common error.
# This report doesn't take into account the users involved.
# The user usage statistics for the service: A list of all users that have used the system, including
# how many info messages and how many error messages they've generated. This report is sorted by username.
# To create these reports write a python script named ticky_check.py. Use nano editor for this.

# nano ticky_check.py
# Add the shebang line.

#!/usr/bin/env python3
# Here's your challenge: Write a script to generate two different reports based ' \
# on the ranking of errors generated by the system and the user usage statistics for
# the service. You'll write the script on your own, but we'll guide you throughout.
#
# First, import all the Python modules that you'll use in this Python script. After importing '
# the necessary modules, initialize two dictionaries: one for the number of different error messages
# and another to count the number of entries for each user (splitting between INFO and ERROR).

# Now, parse through each log entry in the syslog.log file by iterating over the file.
#
# For each log entry, you'll have to first check if it matches the INFO or ERROR message formats. ' \
# You should use regular expressions for this. When you get a successful match, add one to the corresponding value
# in the per_user dictionary. If you get an ERROR message, add one to the corresponding entry
# in the error dictionary by using proper data structure.

# After you've processed the log entries from the syslog.log file, you need to sort ' \
# both the per_user and error dictionary before creating CSV report files.
#
# Keep in mind that:
#
# The error dictionary should be sorted by the number of errors from most common to least common.
# The user dictionary should be sorted by username.
# Insert column names as ("Error", "Count") at the zero index position of the sorted error dictionary.
# And insert column names as ("Username", "INFO", "ERROR") at the zero index position of
# the sorted per_user dictionary.

After sorting these dictionaries, store them in two different files: error_message.csv and user_statistics.csv.

Save the ticky_check.py file by clicking Ctrl-o, Enter key, and Ctrl-x.

Visualize reports
First, give executable permission to the Python script ticky_check.py.

chmod +x ticky_check.py
Run the ticky_check.py by using the following command:

./ticky_check.py
Executing ticky_check.py will generate two report file __error_message.csv __and user_statistics.csv.

You can now visualize the __error_message.csv __and user_statistics.csv by converting them to HTML
pages. To do this, pass the files one by one to the script csv_to _html.py file, like we did in the previous
section.

To convert the error_message.csv into HTML file run the following command:

./csv_to_html.py error_message.csv /var/www/html/<html-filename>.html
Replace <html-filename> with the name of your choice.

To convert user_statistics.csv into HTML file, run the following command:

./csv_to_html.py user_statistics.csv /var/www/html/<html-filename>.html
Replace <html-filename> with the new name

Now, to view these HTML pages, open any web-browser and enter the following URL in the search bar.

[linux-instance-external-IP]/[html-filename].html